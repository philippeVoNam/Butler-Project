#!/usr/bin/env python
 # * author : Philippe Vo 
 # * date : Sep-28-2019 23:50:08
 
# * Imports
# 3rd Party Imports
import argparse
import sys, select, os
# User Imports
from Butler import Butler

# * Code
butler = Butler()

# CLI Parser
parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group()
parser.add_argument('--report', action='store_true', help='report status of day')

parser.add_argument('--screen', action='store_true', help='take a screenshot and save markdown text to clipboard')

parser.add_argument('--mdpdf', action='store_true', help='convert given markdown file into pdf file')
parser.add_argument('--file', action='store', type=str)

parser.add_argument('--task', action='store_true' , help='displays the current task')
parser.add_argument('--day', action='store_true', help='displays the tasks for the day')

parser.add_argument('--timer', action='store_true', help='runs a timer')
parser.add_argument('--mode', action='store', type=str)
parser.add_argument('--endTime', action='store', type=int)
group.add_argument('--sec', action='store_true')
group.add_argument('--min', action='store_true')
group.add_argument('--hour', action='store_true')
args = parser.parse_args()

# * Init all the setup variables
# Note Type
if args.report:
    butler.report()

elif args.timer:
    mode = args.mode
    if args.sec:
        timeType = "seconds"
    elif args.min:
        timeType = "mins"
    elif args.hour:
        timeType = "hours"
    endTime = args.endTime
    
    butler.run_timer(mode,timeType,endTime)

elif args.screen:
    butler.grab_screen()

elif args.task:
    if args.day:
        butler.show_day_tasks()
    else:
        i = 0
        while True:
            butler.announce_current_task()

elif args.mdpdf:
    file = args.file
    butler.convertMD2PDF(file)